/* * NombreDeProyecto * ========================================================
   Font Stroke Functions | Etc [/etc/css/scss/functionsFontStroke.scss]
   ========================================================================== */

/* // Descripcion ----------------------------------------------------------- */
// Archivo de mixins.



/* // Referencias globales de nombres de variables y mixins ----------------- */
///-- Inicio del nombre
// bd                   = borde
// bg                   = fondo / background
// bx                   = box
// ft                   = fuente
// mq, MQ               = media query @media
// tx                   = texto

///-- Fin del nombre
// _before              = se usa con pseudo-elementos ::before
// _after               = se usa con pseudo-elementos ::after
// _act                 = activacion
// _ani                 = animacion
// _hover               = se usa con pseudo-clases :focus y :hover
// _hs                  = hash
// _imp			= importacion
// _mx                  = mixin
// _var                 = variables

///-- Espaciado
// P, M                 = padding, margin
// T, R, B, L           = top, right, bottom, left
// H, V, A, X           = horizontal, vertical, all, custom defined

///-- Tamanos de Pantalla
// T                    = tablet
// B, A, O, L           = before, after, only, landscape

///-- Colores
// X, L, D              = extra, light, dark
// De, S, B             = desaturated, semi, bright

///-- Fuentes
// T, L, M, R, B, BK    = thin, light, medium, regular, bold, black
// X, S, U, C, I        = extra, semi, ultra, condensed, italic



/// Stroke font-character
/// @param  {Integer} $fontStroke_width_fn - Stroke width
/// @param  {Color}   $fontStroke_color_fn - Stroke color
/// @return {List}                         - text-shadow list

@function stroke($fontStroke_width_fn, $fontStroke_color_fn) {
    $shadow: ();

    $from: $fontStroke_width_fn*-1;

    @for $i from $from through $fontStroke_width_fn {
        @for $j from $from through $fontStroke_width_fn {
            $shadow: append($shadow, $i*1px $j*1px 0 $fontStroke_color_fn, comma);
        }
    }
    @return $shadow;
}

/// Stroke font-character
/// @param  {Integer} $fontStroke_width_fn - Stroke width
/// @param  {Color}   $fontStroke_color_fn - Stroke color
/// @return {Style}                        - text-shadow
@mixin fontStroke($fontStroke_width_fn, $fontStroke_color_fn) {
  text-shadow: stroke($fontStroke_width_fn, $fontStroke_color_fn);
}

/// Usage
/// @include fontStroke(2, $black);