/* * NombreDeProyecto * ========================================================
   Useful Classes ALL | Etc [/etc/css/scss/classes_useful_all.scss]
   ========================================================================== */

/* // Descripcion ----------------------------------------------------------- */
// Archivo de estilos scss.



/* // Referencias globales de nombres de variables y mixins ----------------- */
///-- Inicio del nombre
// bd                   = borde
// bg                   = fondo / background
// bx                   = box
// ft                   = fuente
// mq, MQ               = media query @media
// tx                   = texto

///-- Fin del nombre
// _before              = se usa con pseudo-elementos ::before
// _after               = se usa con pseudo-elementos ::after
// _act                 = activacion
// _ani                 = animacion
// _hover               = se usa con pseudo-clases :focus y :hover
// _hs                  = hash
// _imp			= importacion
// _mx                  = mixin
// _var                 = variables

///-- Espaciado
// P, M                 = padding, margin
// T, R, B, L           = top, right, bottom, left
// H, V, A, X           = horizontal, vertical, all, custom defined

///-- Tamanos de Pantalla
// T                    = tablet
// B, A, O, L           = before, after, only, landscape

///-- Colores
// X, L, D              = extra, light, dark
// De, S, B             = desaturated, semi, bright

///-- Fuentes
// T, L, M, R, B, BK    = thin, light, medium, regular, bold, black
// X, S, U, C, I        = extra, semi, ultra, condensed, italic



/*___ Accessibility _____________________*/
#go-main-content{
    @include positionTL(auto, -10000px);
    position: absolute;
    width: 1px;
    height: 1px;
    overflow: hidden;
    
    &:focus{
        position: static;
        width: auto;
        height: auto;
    } 
}

/*___ Clearfix __________________________*/
.clearfix::before,
.clearfix::after{
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
}
.clearfix{display: inline-block}
* html .clearfix{height: 1%}
.clearfix{display: block}


@if $classes_position_display_mask_cursor_act_ALL == "on"{
/*___ Positioning _______________________*/
    .pRel{position: relative}
    .pAbs{position: absolute}
    .clear{clear: both}

/*___ Display ___________________________*/
    .displayBlock{display: $block}
    .displayInline{display: $inline}
    .displayInlineBlock{display: $inlineBlock}
    .displayTable{display: table}
    .displayNone{display: $none}
    .contentBox{box-sizing: content-box}
    .centerVertically{
        display: table-cell;
        vertical-align: middle;
    }
    
    .visuallyHidden:not(:focus):not(:active),
    .sr-only:not(:focus):not(:active){
/*
    // REF [22]
Hide only visually, but have it available for screen readers:
https://snook.ca/archives/html_and_css/hiding-content-for-accessibility

    // REF [22a]
For long content, line feeds are not interpreted as spaces and small width
causes content to wrap 1 word per line:
https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
*/ 
        position: absolute;
        clip-path: inset(100%);
        clip: rect(0 0 0 0);
        width: 1px;
        height: 1px;
        border: $zero;
        padding: $zero;
        margin: -1px;
        overflow: hidden;
        white-space: nowrap; // REF [22a]
    }
    
    article, details, figcaption, figure, hgroup, main, menu, nav, summary,
    .borderBox,{
        &, &::before, &::after{
            box-sizing: border-box;
        }
    }
    
/*___ Masks / Cover _____________________*/
    .mask{
        position: relative;
        overflow: hidden;
    }
    .coverAll{
        @include positionTRBL(0, 0, 0, 0);
        position: absolute;
    }
    .coverAll_mask{
        @include positionTRBL(0, 0, 0, 0);
        position: absolute;
        overflow: hidden;
    }
    
/*___ Cursors ___________________________*/
    .cursorDefault{cursor: default}
    .cursorPointer{cursor: pointer}
    .cursorHelp{cursor: help}
    .cursorNone{cursor: none}
}


@if $classes_lists_floats_act_ALL == "on"{
/*___ Lists and floats __________________*/
    .unstyled, .horizontal{list-style: $none}
    .floatLeft, .horizontal li{float: $left}
    .floatRight{float: $right}
    .horizontalCenter{
        list-style: none;
        margin-right: $auto;
        margin-left: $auto;
        text-align: center;
        li{
            display: inline-block;
            > *{
                display: inline-block;
            }
        }
    }
    .horizontalCenterFlex{
        justify-content: center;
        flex-wrap: nowrap;
    }
    .floatNone,
    .horizontal li.floatNone{float: $none}
}


@if $helpers_spacing_act_ALL == "on"{
/*___ Spacing Helpers ___________________*/
    @include spacingHelpersClassesGenerator;
    .mra,.mha{margin-right: $auto}
    .mla,.mha{margin-left: $auto}
}


@if $classes_flexbox_act_ALL == "on"{
/*___ Flexbox Classes ___________________*/
    .displayFlex, .flexHorizontal, .flexColumn, .flexNoWrap, .flexJustifyEnd, .flexJustifyCenter, .flexJustifyBetween, .flexJustifyAround, .flexAlignContentEnd, .flexAlignContentCenter, .flexAlignContentBetween, .flexAlignContentAround, .flexAlignContentStretch, .flexAlignItemsEnd, .flexAlignItemsCenter, .flexAlignItemsBaseline, .flexAlignItemsStretch, .horizontalCenterFlex{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: flex-start;
        align-content: flex-start;
        align-items: flex-start;
    }
    .flexCenter{
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .flexCenter > *{
        display: block;
        max-width: 100%;
        max-height: 100%;
    }
    .flexColumn{flex-direction: column}
    .flexNoWrap{flex-wrap: nowrap}
    .flexJustifyEnd{justify-content: flex-end}
    .flexJustifyCenter{justify-content: center}
    .flexJustifyBetween{justify-content: space-between}
    .flexJustifyAround{justify-content: space-around}
    .flexAlignContentEnd{align-content: flex-end}
    .flexAlignContentCenter{align-content: center}
    .flexAlignContentBetween{align-content: space-between}
    .flexAlignContentAround{align-content: space-around}
    .flexAlignContentStretch{align-content: stretch}
    .flexAlignItemsEnd{align-items: flex-end}
    .flexAlignItemsCenter{align-items: center}
    .flexAlignItemsBaseline{align-items: baseline}
    .flexAlignItemsStretch{align-items: stretch}
    .flexHorizontal{list-style: $none}
}