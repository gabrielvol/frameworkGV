/* * NombreDeProyecto * ========================================================
   Colours Main Variables | Custom [/etc/css/custom/var/colours_main.scss]
   ========================================================================== */

/* // Descripcion ----------------------------------------------------------- */
// Archivo de variables scss.



/* // Referencias globales de nombres de variables y mixins ----------------- */
///-- Inicio del nombre
// bd                   = borde
// bg                   = fondo / background
// bx                   = box
// ft                   = fuente
// mq                   = media query @media
// tx                   = texto

///-- Fin del nombre
// _mx                  = mixin
// _act                 = activacion
// _ani                 = animacion
// _hs                  = hash
// _hover               = se usa con pseudoclases :focus y :hover
// _before              = se usa con pseudoelementos ::before
// _after               = se usa con pseudoelementos ::after

///-- Espaciado
// P, M                 = padding, margin
// T, R, B, L           = top, right, bottom, left
// H, V, A, X           = horizontal, vertical, all, custom defined

///-- Tamanos de Pantalla
// M, T, D, DL          = mobile, tablet, desktop, desktop large
// B, A, O, L           = before, after, only, landscape

///-- Colores
// X, L, D              = extra, light, dark
// De, S, B             = desaturated, semi, bright

///-- Fuentes
// T, L, M, R, B, BK    = thin, light, medium, regular, bold, black
// X, S, U, C, I        = extra, semi, ultra, condensed, italic



///**Colours Map Light:** 
    ///Aquí se agregan los colores CLAROS usados en el sitio, de este mapa se creara una clase por cada color, eg.: `.white{color: #fff}`, con el mixin  **colourLightClassesGenerator** `[/etc/scss/mixins_colours.scss]`. Generará las pseudoclases `:active` y `:visited` con el mismo valor. Las pseudoclases `:focus` y `:hover` oscurecerán el color de acuerdo al porcentaje asignado en la variable `$colours_light_lightenValue` debajo del mapa.  
$colours_light_map:(
//  redColour:      #ee0000,
  
//  greenSystem3XL: #e6ff99,
//  greenSystem2XL: #b6f268,
//  greenSystemXL:  #8ee12f,
//  greenSystemL:   #54c81a,
    greenSystem:    #339900,
//  greenSystemD:   #2a7d00,
    
//  grey4XL:        #f9f9f9,
//  grey3XL:        #f2f2f2,
    grey2XL:        #e6e6e6,
    greyXL:         #dedede,
    greyL:          #b2b2b2,
    grey:           #8c8c8c,
    
    errorColour:    #eb1c24
);
$colours_light_lightenValue: 20%;

///**Colours Map Dark:** 
    ///Aquí se agregan los colores OSCUROS usados en el sitio, de este mapa se creara una clase por cada color, eg.: `.black{color: #000}` con el mixin **colourDarkClassesGenerator** `[/etc/scss/mixins_colours.scss]`. Generará las pseudoclases `:active` y `:visited` con el mismo valor. Las pseudoclases `:focus` y `:hover` aclararán el color con el porcentaje asignado en la variable `$colours_dark_lightenValue` debajo del mapa.
$colours_dark_map:(
    greyD:          #666,
    greyXD:         #4d4d4d,
    grey2XD:        #333,
    grey3XD:        #111,
    black:          #000
);
$colours_dark_lightenValue: 20%;

///**Colours Map Custom Hover:** 
    ///Aquí se agregan los colores cuyas pseudoclases `:focus` y `:hover` no están generadas automáticamente. Se creará una clase por cada color, eg.: `.black{color: #000}` con el mixin **colourCustomHoverClassesGenerator** `[/etc/scss/mixins_colours.scss]`. Generará las pseudoclases `:active` y `:visited` con el mismo valor. Las pseudoclases `:focus` y `:hover` deberán ser indicadas en su correspondiente placeholder en `[/etc/css/custom/scss/_coloursPlaceholders.scss]`.
$colours_custom_hover_map:(    
    orange: #ff6600
);

$colours_merged_map: map-merge(
    map-merge($colours_light_map, $colours_dark_map),
    $colours_custom_hover_map
);

$white:             #fff;
$white_hover:       darken($white, 10%);
$white_rgba_10:     rgba(255, 255, 255, 0.1);
$white_rgba_20:     rgba(255, 255, 255, 0.2);
$white_rgba_30:     rgba(255, 255, 255, 0.3);
$white_rgba_40:     rgba(255, 255, 255, 0.4);
$white_rgba_50:     rgba(255, 255, 255, 0.5);
$white_rgba_60:     rgba(255, 255, 255, 0.6);
$white_rgba_70:     rgba(255, 255, 255, 0.7);
$white_rgba_80:     rgba(255, 255, 255, 0.8);
$white_rgba_85:     rgba(255, 255, 255, 0.85);
$white_rgba_90:     rgba(255, 255, 255, 0.9);

$black:             map-get($colours_merged_map, black);
$black_rgba_10:     rgba(0, 0, 0, 0.1);
$black_rgba_20:     rgba(0, 0, 0, 0.2);
$black_rgba_30:     rgba(0, 0, 0, 0.3);
$black_rgba_40:     rgba(0, 0, 0, 0.4);
$black_rgba_50:     rgba(0, 0, 0, 0.5);
$black_rgba_60:     rgba(0, 0, 0, 0.6);
$black_rgba_70:     rgba(0, 0, 0, 0.7);
$black_rgba_80:     rgba(0, 0, 0, 0.8);
$black_rgba_90:     rgba(0, 0, 0, 0.9);

$greyXL_rgba_00:    rgba(222, 222, 222, 0); // REF [16]

$errorColour:       map-get($colours_merged_map, errorColour);

//$greenSystem3XL:    map-get($colours_merged_map, greenSystem3XL);
//$greenSystem2XL:    map-get($colours_merged_map, greenSystem2XL);
//$greenSystemXL:     map-get($colours_merged_map, greenSystemXL);
//$greenSystemL:      map-get($colours_merged_map, greenSystemL);
$greenSystem:       map-get($colours_merged_map, greenSystem);
//$greenSystemD:      map-get($colours_merged_map, greenSystemD);

//$grey4XL:           map-get($colours_merged_map, grey4XL);
//$grey3XL:           map-get($colours_merged_map, grey3XL);
$grey2XL:           map-get($colours_merged_map, grey2XL);
$greyXL:            map-get($colours_merged_map, greyXL);
$greyL:             map-get($colours_merged_map, greyL);
$grey:              map-get($colours_merged_map, grey);
$greyD:             map-get($colours_merged_map, greyD);
$greyXD:            map-get($colours_merged_map, greyXD);
$grey2XD:           map-get($colours_merged_map, grey2XD);
$grey3XD:           map-get($colours_merged_map, grey3XD);

//$redColour:         map-get($colours_merged_map, redColour);

///**Anchor Colours Light:** 
    ///Aquí se agregan los colores para las anclas dentro de un párrafo con color CLARO, de este mapa se creara una clase por cada color con el mixin **anchorColoursLightClassesGenerator** `[/etc/scss/coloursMixins.scss]`. Se creara el sig. CSS por cada color, eg.: `.white a{color: #fff}`. Generará las pseudoclases `:active` y `:visited` con el mismo valor. Las pseudoclases `:focus` y `:hover` aclararán el color con el porcentaje asignado en la variable `$colours_anchor_ftColours_light_lightenValue` debajo del mapa. 
$colours_anchor_ftColours_light_map:(
//  white: $white,
);
$colours_anchor_ftColours_light_lightenValue: 20%;

///**Anchor Colours Dark:** 
    ///Aquí se agregan los colores para las anclas dentro de un párrafo con color OSCURO, de este mapa se creara una clase por cada color con el mixin **anchorColoursDarkClassesGenerator** `[/etc/scss/coloursMixins.scss]`. Se creara el sig. CSS por cada color, eg.: `.black a{color: #000}`. Generará las pseudoclases `:active` y `:visited` con el mismo valor. Las pseudoclases `:focus` y `:hover` oscurecerán el color con el porcentaje asignado en la variable `$colours_anchor_ftColours_dark_lightenValue` debajo del mapa.
$colours_anchor_ftColours_dark_map:(
//  black: $black,
);
$colours_anchor_ftColours_dark_lightenValue: 20%;